import os
import pickle
import sys
import time
import getpass
import datetime


def cls():
    os.system("cls")

class Usuarios:
    def __init__(self):
        self.codigo = 0
        self.usuario = ""
        self.clave = ""
        self.tipo = ""

class Locales:
    def __init__(self):
        self.nombre = ""
        self.ubicacion = ""
        self.rubro = ""
        self.cod = 0
        self.codigodue = 0
        self.estado = ["A", "B"]

class Promociones:
    def __init__(self):
        self.cod = 0
        self.texto = ""
        self.fechadesde = ""
        self.fechahasta = ""
        self.dias = [0, 0, 0, 0, 0, 0, 0]
        self.estado = ["Pendiente", "Aprobada", "Rechazada"]
        self.codlocal = 0

class UsoPromociones:
    def __init__(self):
        self.codcliente= 0
        self.codpromo= 0
        self.fecha= ""


RESET = "\033[0m"
ROJO = "\033[91m"
VERDE = "\033[92m"
CYAN = "\033[96m"
AMARILLO = "\033[93m"   

afUsuario = "c:\\tp3\\USUARIOS.DAT"
afLocales = "c:\\tp3\\LOCALES.DAT"
afPromos = "c:\\tp3\\PROMOCIONES.DAT"
afUsoPromo = "c:\\tp3\\USO_PROMOCIONES.DAT"

Rubros = {"indumentaria":0, "perfumeria":0, "comida":0}

def Archivo():
    usuario_admin = {
        "codigo": 1,
        "usuario": "admin@shopping.com",
        "clave": "12345",
        "tipo": "Administrador"
    }

    # Verifica y abre el archivo de usuarios
    if not os.path.exists(afUsuario):
        with open(afUsuario, "wb") as ArcLogico:
            pickle.dump([usuario_admin], ArcLogico)
    else:
        with open(afUsuario, "rb") as ArcLogico:
            pass  # No necesitas hacer nada aquí, simplemente abre el archivo

    # Verifica y abre el archivo de locales
    if not os.path.exists(afLocales):
        with open(afLocales, "wb") as ArcLogico:
            # Crea una lista vacía para los locales si el archivo no existe
            locales = []
            pickle.dump(locales, ArcLogico)
    else:
        with open(afLocales, "rb") as ArcLogico:
            pass

    # Verifica y abre el archivo de promociones
    if not os.path.exists(afPromos):
        with open(afPromos, "wb") as ArcLogico:
            pickle.dump([], ArcLogico)  # Aquí debes proporcionar una lista vacía

    # Verifica y abre el archivo de uso de promociones
    if not os.path.exists(afUsoPromo):
        with open(afUsoPromo, "wb") as ArcLogico:
            pickle.dump([], ArcLogico)  # Aquí debes proporcionar una lista vacía

def login():
    cont = 0
    while cont < 3:
        cont += 1

        cls()
        print(f"""{CYAN}		╔════════════════════════╗
		║ ►► Inicio de sesión ◄◄ ║
		╚════════════════════════╝{RESET}""")
        print(f"{AMARILLO}════════════════════════════════════════════════════════{RESET}\n")
        NombreUser = input(f"{AMARILLO}►Ingrese el nombre de usuario:{RESET} ").lower()
        PassUser = getpass.getpass(f"{AMARILLO}►Ingrese la contraseña (No será visible): {RESET}")

        if os.path.exists(afUsuario):
            with open(afUsuario, "rb") as ArcLogico:
                usuarios = pickle.load(ArcLogico)
        else:
            usuarios = []

        UserValido = None
        for usuario in usuarios:
            if usuario['usuario'] == NombreUser and usuario['clave'] == PassUser:
                UserValido = usuario

        if UserValido:
            TipoUsuario = UserValido['tipo']
            codigoaux = UserValido['codigo']  

            if TipoUsuario == "Administrador":
                print(f"\n{VERDE}-Sesion iniciada como: Administrador!{RESET}")
                time.sleep(1)
                MenuAdmin()
            elif TipoUsuario == "Dueño":
                print(f"\n{VERDE}-Sesion iniciada como: Dueño de Local{RESET}")
                time.sleep(1)
                LocalesExist = ObtenerLocalesPorDueño(codigoaux)
                MenuDue(codigoaux, LocalesExist)  
            elif TipoUsuario == "Cliente":
                print(f"\n{VERDE}- Bienvenido, Cliente -{RESET}")
                MenuCliente()
                time.sleep(1)

            return codigoaux 

        else:
            if cont < 3:
                cls()
                print(f"{ROJO}═════════════════════════════════════════")
                print("- Usuario o contraseña INCORRECTOS")
                print("- Intentos:", cont, "(Máximo 3)")
                print(f"{ROJO}═════════════════════════════════════════")
                input(f"{RESET}>>Presione ENTER para volver a intentar<<")
                print(f"{ROJO}═════════════════════════════════════════")
            elif cont == 3:
                cls()
                print(f"{ROJO}════════════════════════════════════")
                print("- Usuario o contraseña INCORRECTOS")
                print("- Alcanzaste los intentos máximos :(")
                print(f"{ROJO}════════════════════════════════════")
                input(f"{RESET}>>Presione ENTER para finalizar<<")
                print(f"{ROJO}════════════════════════════════════")

    return None

def ObtenerLocalesPorDueño(codigoaux):
    if os.path.exists(afLocales):
        with open(afLocales, "rb") as ArcLogico:
            locales = pickle.load(ArcLogico)
    else:
        locales = []

    locales_dueño = []
    for local in locales:
        if local.codigodue == codigoaux:
            locales_dueño.append(local)

    return locales_dueño

def RegistroCli():

    cls()

    if os.path.exists(afUsuario):
        with open(afUsuario, "rb") as ArcLogico:
            usuarios = pickle.load(ArcLogico)
    else:
        usuarios = []

    print(f"""{CYAN}		╔═════════════════════════╗
		║ ►► Registrar CLIENTE ◄◄ ║
		╚═════════════════════════╝{RESET}""")
    print("══════════════════════════════════════════════════════════")
    correo = input(f"\n{AMARILLO}►Ingrese el nombre de usuario: {RESET}").lower()

    clave = ""
    while len(clave) != 8:
        clave = input(f"{AMARILLO}►Ingrese la contraseña (Debe tener 8 carac.): {RESET}")

    UserExist = None

    for usuario in usuarios:
        if usuario['usuario'] == correo:  
            UserExist = usuario

    if UserExist:
        print(f"\n{ROJO}►Ya existe un usuario con ese correo electrónico.{RESET}")
        input(f"\n>>Presione ENTER para continuar<<")

    else:
        CodNuevo = len(usuarios) + 1

        UserNuevo = {
            "codigo": CodNuevo,
            "usuario": correo,
            "clave": clave,
            "tipo": "Cliente"
        }

        usuarios.append(UserNuevo)
        print(f"\n{VERDE}Usuario cliente creado con éxito.{RESET}")
        input(f"\n>>Presione ENTER para continuar<<")

        with open(afUsuario, "wb") as ArcLogico:
            pickle.dump(usuarios, ArcLogico)

def RegistroDue():

    cls()

    if os.path.exists(afUsuario):
        with open(afUsuario, "rb") as ArcLogico:
            usuarios = pickle.load(ArcLogico)
    else:
        usuarios = []

    print(f"""{CYAN}		╔═══════════════════════╗
		║ ►► Registrar DUENO ◄◄ ║
		╚═══════════════════════╝{RESET}""")
    print("══════════════════════════════════════════════════════════")
    correo = input(f"\n{AMARILLO}►Ingrese el nombre de usuario: {RESET}").lower()
    clave = ""
    while len(clave) != 8:
        clave = input(f"{AMARILLO}►Ingrese la contraseña (Debe tener 8 carac.): {RESET}")

    UserExist = None
    for usuario in usuarios:
        if usuario['usuario'] == correo:  
            UserExist = usuario

    if UserExist:
        print(f"\n{ROJO}►Ya existe un usuario con ese correo electrónico.{RESET}")
        input(f"\n>>Presione ENTER para continuar<<")
    else:
        CodNuevo = len(usuarios) + 1

        UserNuevo = {
            "codigo": CodNuevo,
            "usuario": correo,
            "clave": clave,
            "tipo": "Dueño"
        }

        usuarios.append(UserNuevo)
        print(f"\n{VERDE}Usuario cliente creado con éxito.{RESET}")
        input(f"\n>>Presione ENTER para continuar<<")

        with open(afUsuario, "wb") as ArcLogico:
            pickle.dump(usuarios, ArcLogico)

def MenuAdmin():

    cls()

    opt = None

    while opt != "0":
        cls()
        print(f"""{CYAN}	        ╔══════════════════════════╗
                ║ ►► Menú Administrador ◄◄ ║
                ╚══════════════════════════╝{RESET}\n""")
        print(f"{AMARILLO}══════════════════════════════════════════════════════════{RESET}\n")
        print("1. Gestión de locales")
        print("2. Crear cuentas de dueños de locales")
        print("3. Aprobar / Denegar solicitud de descuento")
        print("4. Gestión de Novedades")
        print("5. Reporte de utilización de descuentos\n")
        print("0. Salir")

        opt = input(f"\n{AMARILLO}-Ingrese una opción: {RESET} ")

        if opt == "1":
            GestionLocales()
        elif opt == "2":
            RegistroDue()
        elif opt == "3":
            pass  # Implementar la aprobación/denegación de solicitud de descuento
        elif opt == "4":
            pass  # Implementar la gestión de novedades
        elif opt == "5":
            pass  # Implementar el reporte de utilización de descuentos

def MenuCliente():

    cls()

    opt = None

    while opt != "0":
        cls()
        print(f"""{CYAN}			╔════════════════════╗
                        ║ ►► Menú Cliente ◄◄ ║
                        ╚════════════════════╝{RESET}\n""")
        print(f"{AMARILLO}══════════════════════════════════════════════════════════{RESET}\n")
        print("1. Registrarme")
        print("2. Buscar descuentos en locales")
        print("3. Solicitar descuento")
        print("4. Ver novedades\n")
        print("0. Salir")

        opt = input(f"\n{AMARILLO}-Ingrese una opción: {RESET} ")

        if opt == "1":
            pass
        elif opt == "2":
            pass
        elif opt == "3":
            pass

def MenuDue(codigoaux, LocalesExist):
    cls()
    codigo_dueño = codigoaux
    opt = None

    while opt != "0":
        cls()
        print(f"""{CYAN}	╔═══════════════════════════╗
	║ ►► Menú Dueño de Local ◄◄ ║
	╚═══════════════════════════╝{RESET}\n""")
        print(f"{AMARILLO}══════════════════════════════════════════════════════════{RESET}\n")
        print("1. Crear descuento")
        print("2. Reporte de uso de descuentos")
        print("3. Ver novedades\n")
        print("0. Salir")

        opt = input(f"\n{AMARILLO}-Ingrese una opción: {RESET} ")

        if opt == "1":
            MostrarLocalesxDue(codigoaux, LocalesExist)
            crear_promocion(codigo_dueño, LocalesExist)
        elif opt == "2":
            pass
        elif opt == "3":
            pass

def MostrarLocalesxDue(codigoaux, LocalesExist):

    cls()

    if not LocalesExist:
        print(f"{ROJO}-No se han cargado locales hasta el momento-{RESET}")
    else:
        print(f"{AMARILLO}►► Locales cargados hasta el momento del dueño con código {codigoaux}:◄◄{RESET}")
        for local in LocalesExist:
            if local.codigodue == codigoaux:
                estado = f"{VERDE}Activo{RESET}" if local.estado == "A" else f"{ROJO}Dado de baja{RESET}"
                print(f"Código: {local.codigo}, Nombre: {local.nombre}, Rubro: {local.rubro}, Estado: {estado}, Codigo del dueno: {local.codigodue}")

def BuscarLocal(LocalesExist, nombre):
    izquierda, derecha = 0, len(LocalesExist) - 1

    while izquierda <= derecha:
        medio = (izquierda + derecha) // 2
        if LocalesExist[medio].nombre == nombre:
            return True
        elif LocalesExist[medio].nombre < nombre:
            izquierda = medio + 1
        else:
            derecha = medio - 1

    return False

def MostrarLocales(LocalesExist):

    cls()

    if not LocalesExist:
        print(f"{ROJO}-No se han cargado locales hasta el momento-{RESET}")
    else:
        print(f"{AMARILLO}►► Locales cargados hasta el momento:◄◄{RESET}")
        for local in LocalesExist:
            estado = f"{VERDE}Activo{RESET}" if local.estado == "A" else f"{ROJO}Dado de baja{RESET}"
            print(f"Código: {local.codigo}, Nombre: {local.nombre}, Rubro: {local.rubro}, Estado: {estado}, Codigo del dueno: {local.codigodue}")

def CrearLocales(locales):

    cls()

    if os.path.exists(afLocales):
        with open(afLocales, "rb") as ArcLogico:
            locales = pickle.load(ArcLogico)

    MostrarLocales(locales)
    print("══════════════════════════════════════════════════════════")
    print(f"\n{CYAN}►► Registrar nuevo LOCAL ◄◄{RESET}\n")
    nombre = input(f"{AMARILLO}Ingrese el nombre del local:{RESET} ")

    Flag = BuscarLocal(locales, nombre)

    if Flag == True:
        print(f"\n{ROJO}Ya existe un local con el mismo nombre. No se pudo crear el local.{RESET}")
        time.sleep(2)
        return

    ubicacion = input(f"{AMARILLO}Ingrese la ubicación del local: {RESET}")
    rubro = input(f"{AMARILLO}Ingrese el rubro del local (indumentaria, perfumería o comida):{RESET} ").lower()

    if rubro not in ["indumentaria", "perfumería", "perfumeria", "comida"]:
        print(f"{ROJO}Rubro inválido. Por favor, ingrese indumentaria, perfumería o comida.{RESET}")
        time.sleep(2)
        return

    codigodue = int(input(f"{AMARILLO}Código del dueño del local: {RESET}"))

    DuenoValido = False

    if os.path.exists(afUsuario):
        with open(afUsuario, "rb") as ArcLogico:
            usuarios = pickle.load(ArcLogico)

            for usuario in usuarios:
                if usuario["codigo"] == codigodue and usuario["tipo"] == "Dueño":
                    DuenoValido = True

    if not DuenoValido:
        print(f"{ROJO}Código de dueño inválido. No se pudo crear el local.{RESET}")
        time.sleep(2)
        return

    rubro_local = rubro
    if rubro_local in Rubros:
        Rubros[rubro_local] += 1

    cod = len(locales) + 1

    NuevoLocal = Locales()
    NuevoLocal.codigo = cod
    NuevoLocal.nombre = nombre
    NuevoLocal.ubicacion = ubicacion
    NuevoLocal.rubro = rubro
    NuevoLocal.codigodue = codigodue
    NuevoLocal.estado = "A"

    locales = Ordenamiento(locales, NuevoLocal)

    with open(afLocales, "wb") as ArcLogico:
        pickle.dump(locales, ArcLogico)

    print(f"\n{VERDE}Local creado con éxito.{RESET}")
    time.sleep(2)

def Ordenamiento(locales, NuevoLocal):
    indice = 0
    while indice < len(locales) and locales[indice].nombre < NuevoLocal.nombre:
        indice += 1

    locales.insert(indice, NuevoLocal)
    return locales

def GestionLocales():

    cls()

    opt = None

    locales = []

    while opt != "e":
        cls()
        print(f"""{CYAN}		╔══════════════════════════╗
                ║ ►► Gestión de Locales ◄◄ ║
                ╚══════════════════════════╝{RESET}\n""")
        print(f"{AMARILLO}══════════════════════════════════════════════════════════{RESET}\n")
        print("a) Crear local")
        print("b) Modificar local")
        print("c) Eliminar local")
        print("d) Mapa de locales\n")
        print("e) Volver")

        opt = input(f"\n{AMARILLO}-Ingrese una opción: {RESET} ")

        if opt == "a":
            CrearLocales(locales)
        elif opt == "b":
            ModificarLocal(locales)
        elif opt == "c":
            EliminarLocal()
        elif opt == "d":
            MapaLocales(locales)

def ModificarLocal(locales):
    cls()

    if os.path.exists(afLocales):
        with open(afLocales, "rb") as ArcLogico:
            Locales = pickle.load(ArcLogico)
    else:
        Locales = []

    MostrarLocales(Locales)
    print("══════════════════════════════════════════════════════════")
    print(f"{CYAN}►► Modificar LOCAL ◄◄{RESET}\n")
    CodLocal = int(input(f"{AMARILLO}Ingrese el código del local a modificar:{RESET} "))

    LocalExist = None

    for local in Locales:
        if local.codigo == CodLocal:
            LocalExist = local

    if LocalExist is None:
        print(f"\n{ROJO}No se encontró un local con el código ingresado.{RESET}")
        time.sleep(2)
        return

    if LocalExist.estado == 'B':
        confirmacion = input(f"\nEl local {LocalExist.nombre} está inactivo. ¿Desea activarlo? ({VERDE}S{RESET}/{ROJO}N{RESET}): ").lower()
        if confirmacion == 's':
            LocalExist.estado = 'A'
            print(f"\nEl local {LocalExist.nombre} ha sido {VERDE}Activado{RESET}.")
        else:
            print(f"\nActivación {ROJO}Cancelada{RESET} para el local {LocalExist.nombre}.")
            time.sleep(2)
            return

    print(f"\n{CYAN}►► Modificando local con código {CodLocal} ◄◄{RESET}")
    NuevoNom = input(f"{AMARILLO}Nuevo nombre del local:{RESET} ")

    for ValNomLocal in Locales:
        if ValNomLocal.codigo != CodLocal and ValNomLocal.nombre == NuevoNom:
            print(f"\n{ROJO}Ya existe otro local con el mismo nombre. No se pudo modificar el local.{RESET}")
            time.sleep(2)
            return

    ubicacion = input(f"{AMARILLO}Nueva ubicación del local: {RESET}")
    rubro = input(f"{AMARILLO}Nuevo rubro del local (indumentaria, perfumería o comida): {RESET}").lower()
    codigodue = int(input(f"{AMARILLO}Nuevo código del dueño del local: {RESET}"))

    if rubro not in ["indumentaria", "perfumería", "perfumeria", "comida"]:
        print(f"{ROJO}\nRubro inválido. {RESET}Por favor, ingrese indumentaria, perfumería o comida.")
        time.sleep(2)
        return

    DuenoValido = False

    if os.path.exists(afUsuario):
        with open(afUsuario, "rb") as ArcLogico:
            usuarios = pickle.load(ArcLogico)

            for usuario in usuarios:
                if usuario["codigo"] == codigodue and usuario["tipo"] == "Dueño":
                    DuenoValido = True

    if not DuenoValido:
        print(f"\n{ROJO}El código del dueño no corresponde a un usuario con el tipo 'Dueño'.{RESET}")
        time.sleep(2)
        return

    LocalExist.nombre = NuevoNom
    LocalExist.ubicacion = ubicacion
    LocalExist.rubro = rubro
    LocalExist.codigodue = codigodue

    with open(afLocales, "wb") as ArcLogico:
        pickle.dump(Locales, ArcLogico)

    print(f"\n{VERDE}Se ha modificado el local con éxito.{RESET}")
    time.sleep(2)

def EliminarLocal():

    cls()

    if os.path.exists(afLocales):
        with open(afLocales, "rb") as ArcLogico:
            locales = pickle.load(ArcLogico)
    else:
        locales = []

    MostrarLocales(locales)

    print("══════════════════════════════════════════════════════════")
    print(f"\n{CYAN}►► Eliminar LOCAL ◄◄{RESET}\n")

    CodLocal = int(input(f"{AMARILLO}Ingrese el CÓDIGO del local que desea eliminar o dar de alta:{RESET} "))

    CodLocalExist = None
    for local in locales:
        if local.codigo == CodLocal:
            CodLocalExist = local

    if CodLocalExist is None:
        print(f"\n{ROJO}No se encontró un local con el código ingresado.{RESET}")
        time.sleep(2)
        return

    if CodLocalExist.estado == 'A':
        confirmacion = input(f"{AMARILLO}¿Está seguro que desea dar de baja el local {CodLocalExist.nombre}? ({VERDE}S{AMARILLO}/{ROJO}N{AMARILLO}): {RESET}").lower()
        if confirmacion == 's':
            CodLocalExist.estado = 'B'
            with open(afLocales, "wb") as ArcLogico:
                pickle.dump(locales, ArcLogico)
            print(f"\n{VERDE}Se ha dado de baja el local con éxito.{RESET}")
        else:
            print(f"\n{ROJO}No se ha eliminado el local.{RESET}")
    else:
        confirmacion = input(f"{AMARILLO}El local ya está dado de baja. ¿Desea activar {CodLocalExist.nombre}? ({VERDE}S{AMARILLO}/{ROJO}N{AMARILLO}): {RESET}").lower()
        if confirmacion == 's':
            CodLocalExist.estado = 'A'
            with open(afLocales, "wb") as ArcLogico:
                pickle.dump(locales, ArcLogico)
            print(f"\n{VERDE}Se ha activado nuevamente el local con éxito.{RESET}")
        else:
            print(f"\n{ROJO}No se ha realizado ninguna acción.{RESET}")

    time.sleep(2)

def MapaLocales(locales):
    cls()
    print(f"""{CYAN}   ╔═════════════════════╗
   ║ ►►Mapa de Locales◄◄ ║
   ╚═════════════════════╝{RESET}\n""")

    # Cargar los locales desde el archivo locales.dat
    if os.path.exists(afLocales):
        with open(afLocales, "rb") as ArcLogico:
            locales = pickle.load(ArcLogico)
    else:
        locales = []
    
    if len(locales) > 50:
        print(f"\n{AMARILLO}Próximamente se habilitará un mapa con los demás locales…{RESET}")
        return

    MapaLocales = [[0 for _ in range(5)] for _ in range(10)]  # Inicializa el mapa de locales con ceros

    # Asigna los códigos de los locales en orden al mapa
    for i, local in enumerate(locales):
        fila = i // 5  # Calcula la fila en la que se encuentra el local
        columna = i % 5  # Calcula la columna en la que se encuentra el local

        # Determina el color según el estado
        if local.estado == 'A':
            codigo_color = VERDE + f"{local.codigo:^4}" + RESET
        else:
            codigo_color = ROJO + f"{local.codigo:^4}" + RESET

        MapaLocales[fila][columna] = codigo_color

    # Muestra el mapa de locales con códigos alineados
    for fila in MapaLocales:
        print("+-----+-----+-----+-----+-----+")
        for codigo in fila:
            print(f"┃ {str(codigo).center(4)}", end="")
        print("┃")
    print("+-----+-----+-----+-----+-----+")

    print(f"\n{VERDE}VERDE{RESET}","= Activo")
    print(f"{ROJO}ROJO{RESET}","= Dado de baja")

    input("\n>>Presione ENTER para continuar<<")

def guardar_promocion(promocion):
    if os.path.exists(afPromos):
        with open(afPromos, "rb") as ArcLogico:
            promociones = pickle.load(ArcLogico)
    else:
        promociones = []

    # Agregar la nueva promoción a la lista
    promociones.append(promocion)

    # Guardar la lista actualizada en el archivo
    with open(afPromos, 'wb') as ArcLogico:
        pickle.dump(promociones, ArcLogico)


def mostrar_promociones_vigentes_dueño_local(codigo_dueño, LocalesExist):
    if not LocalesExist:
        print(f"{ROJO}- No se han cargado locales hasta el momento -{RESET}")
    else:
        print(f"{AMARILLO}►► Promociones vigentes de los locales del dueño con código {codigo_dueño}:◄◄{RESET}")

        # Cargar las promociones desde el archivo PROMOCIONES.DAT
        try:
            with open('PROMOCIONES.DAT', 'rb') as archivo_promociones:
                promociones = pickle.load(archivo_promociones)
        except FileNotFoundError:
            promociones = []

        for local in LocalesExist:
            if local.codigodue == codigo_dueño and local.estado == "A":
                print(f"Local: {local.nombre}")
                promociones_local = [promocion for promocion in promociones if promocion.codlocal == local.codigo]
                if not promociones_local:
                    print(f"  No hay promociones para este local.")
                else:
                    for promocion in promociones_local:
                        # Verificar si la promoción está vigente
                        fecha_actual = datetime.date.today()
                        if promocion.fechadesde <= fecha_actual <= promocion.fechahasta:
                            estado_promocion = "Vigente"
                            print(f"  Código Promoción: {promocion.cod}, Estado: {estado_promocion}, Descripción: {promocion.texto}")




def crear_promocion(codigo_dueño, LocalesExist):

    mostrar_promociones_vigentes_dueño_local(codigo_dueño, LocalesExist)

    CodigoLocal = input("Ingrese el código del local al que corresponde la promoción: ").strip()

    for local in LocalesExist:
        local.codigo = str(local.codigo)

    # Validar si el código de local es válido
    CodigoValido = False
    for local in LocalesExist:
        if local.codigo == CodigoLocal and local.codigodue == codigo_dueño and local.estado == 'A':
            CodigoValido = True

    if not CodigoValido:
        print("Error: Código de local no válido o no corresponde al dueño de local logueado.")
        input("Presione ENTER para continuar...")
        return

    # Solicitar información para la promoción
    TextoPromo = input("Descripción de la promoción: ")
    fecha_inicio = input("Fecha de inicio (DD-MM-YYYY): ")
    fecha_fin = input("Fecha de fin (DD-MM-YYYY): ")

    # Validar y procesar fechas
    try:
        fecha_inicio = datetime.datetime.strptime(fecha_inicio, "%d-%m-%Y").date()
        fecha_fin = datetime.datetime.strptime(fecha_fin, "%d-%m-%Y").date()
    except ValueError:
        print("Error: Formato de fecha incorrecto. Utilice el formato DD-MM-YYYY.")
        input("Presione ENTER para continuar...")
        return

    # Verificar si la fecha de inicio es anterior a la fecha de fin
    if fecha_inicio >= fecha_fin:
        print("Error: La fecha de inicio debe ser anterior a la fecha de fin.")
        input("Presione ENTER para continuar...")
        return

    # Solicitar los días de la semana disponibles
    dias_disponibles = []
    for dia in ["lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"]:
        valido = input(f"¿La promoción estará disponible los {dia}? (1 para sí, 0 para no): ")
        if valido not in ("0", "1"):
            print("Error: Ingrese 1 si la promoción estará disponible ese día o 0 si NO.")
            input("Presione ENTER para continuar...")
            return
        dias_disponibles.append(int(valido))

    # Asignar estado de la promoción como 'pendiente'
    estado_promocion = "pendiente"

    # Crear una instancia de la clase Promociones y establecer sus atributos
    nueva_promocion = Promociones()
    nueva_promocion.codlocal = CodigoLocal
    nueva_promocion.texto = TextoPromo
    nueva_promocion.fechadesde = fecha_inicio
    nueva_promocion.fechahasta = fecha_fin
    nueva_promocion.dias = dias_disponibles
    nueva_promocion.estado = estado_promocion

    # Guardar la promoción en el archivo PROMOCIONES.DAT (o en la ubicación deseada)
    guardar_promocion(nueva_promocion)

    print("Promoción creada exitosamente.")
    time.sleep(2)




Archivo()

opt = None

while opt != "3":
    cls()
    print(f"""{CYAN}		╔══════════════════════╗
		║ ►► Menu Principal ◄◄ ║
		╚══════════════════════╝{RESET}""")
    print(f"{AMARILLO}══════════════════════════════════════════════════════════{RESET}\n")
    print("1. Ingresar como usuario")
    print("2. Registrarse como cliente")
    print("3. Salir")
    opt = input(f"\n{AMARILLO}-Ingrese una opción: {RESET} ")

    if opt == "1":
        login()
    elif opt == "2":
        RegistroCli()
    elif opt == "3":
        cls()
        print(f"""{ROJO}
            
        ╔═════════════════════════════╗
        ║ >>CERRANDO EL PROGRAMA...<< ║
        ╚═════════════════════════════╝""")
        time.sleep(1)





